<?php

namespace App\Services;

use App\Library\Bot\InfoBot;
use App\Models\Project;
use App\Models\Ticket;
use App\Models\User;

class TicketNotificationService
{
    public function __construct(
        private readonly InfoBot $infoBot,
    ) {
    }

    public function notifyTicketCreated(Ticket $ticket): void
    {
        $ticket->loadMissing([
            'project',
            'priority',
            'creator',
            'assignees',
            'status',
            'epic',
        ]);

        $assignees = $ticket->assignees->pluck('name')->implode(', ');
        $assigneesChatIDs = $ticket->assignees->pluck('chat_id')->filter()->all();

        $projectChatId = $ticket->project?->chat_id;
        $threadId = $ticket->project?->thread_id;

        $this->notifyProjectAboutCreatedTicket($ticket, $assignees, $projectChatId, $threadId);
        $this->notifyAssigneesAboutCreatedTicket($ticket, $assigneesChatIDs);
    }

    public function notifyTicketStatusChanged(Ticket $ticket, string $oldStatus, string $newStatus): void
    {
        $ticket->loadMissing([
            'project',
            'priority',
            'creator',
            'assignees',
        ]);

        $assignees = $ticket->assignees->pluck('name')->implode(', ');
        $assigneesChatIDs = $ticket->assignees->pluck('chat_id')->filter()->all();

        $projectChatId = $ticket->project?->chat_id;
        $threadId = $ticket->project?->thread_id;

        $this->notifyProjectAboutStatusChange($ticket, $assignees, $projectChatId, $threadId, $oldStatus, $newStatus);
        $this->notifyAssigneesAboutStatusChange($ticket, $assigneesChatIDs, $newStatus);
    }

    private function notifyProjectAboutCreatedTicket(Ticket $ticket, string $assignees, ?string $projectChatId, ?string $threadId): void
    {
        if (empty($projectChatId)) {
            return;
        }

        $text = 'üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ' . $ticket->name . PHP_EOL .
            'üîó http://canban.mo.local/admin/tickets/' . $ticket->id . PHP_EOL .
            'üÜî –ü—Ä–æ–µ–∫—Ç: ' . $ticket->project->name . PHP_EOL .
            'üë®‚Äçüíº –°–æ–∑–¥–∞—Ç–µ–ª—å: ' . $ticket->creator->name . PHP_EOL .
            '‚ùï –°—Ç–∞—Ç—É—Å: ' . $ticket->status->name . PHP_EOL .
            'üîñ –≠—Ç–∞–ø: ' . ($ticket->epic ? $ticket->epic->name : '–ù–µ —É–∫–∞–∑–∞–Ω') . PHP_EOL .
            '‚è∞ –°—Ä–æ–∫: ' . ($ticket->due_date ? $ticket->due_date->format('d.m.Y') : '–ù–µ —É–∫–∞–∑–∞–Ω') . PHP_EOL .
            '‚ÄºÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ' . ($ticket->priority ? $ticket->priority->name : '–ù–µ —É–∫–∞–∑–∞–Ω') . PHP_EOL .
            'üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: ' . ($assignees ?: '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã') . PHP_EOL;

        $this->infoBot->send($projectChatId, $text, $threadId);
    }

    private function notifyAssigneesAboutCreatedTicket(Ticket $ticket, array $assigneesChatIDs): void
    {
        if (empty($assigneesChatIDs)) {
            return;
        }

        foreach ($assigneesChatIDs as $assigneesChatID) {
            $text = 'üÜï –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ' . $ticket->name . PHP_EOL .
                'üîó http://canban.mo.local/admin/tickets/' . $ticket->id . PHP_EOL .
                'üÜî –ü—Ä–æ–µ–∫—Ç: ' . $ticket->project->name . PHP_EOL .
                'üë®‚Äçüíº –°–æ–∑–¥–∞—Ç–µ–ª—å: ' . $ticket->creator->name . PHP_EOL .
                '‚ùï –°—Ç–∞—Ç—É—Å: ' . $ticket->status->name . PHP_EOL .
                'üîñ –≠—Ç–∞–ø: ' . ($ticket->epic ? $ticket->epic->name : '–ù–µ —É–∫–∞–∑–∞–Ω') . PHP_EOL .
                '‚è∞ –°—Ä–æ–∫: ' . ($ticket->due_date ? $ticket->due_date->format('d.m.Y') : '–ù–µ —É–∫–∞–∑–∞–Ω') . PHP_EOL .
                '‚ÄºÔ∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ' . ($ticket->priority ? $ticket->priority->name : '–ù–µ —É–∫–∞–∑–∞–Ω') . PHP_EOL;

            $this->infoBot->send($assigneesChatID, $text);
        }
    }

    private function notifyProjectAboutStatusChange(Ticket $ticket, string $assignees, ?string $projectChatId, ?string $threadId, string $oldStatus, string $newStatus): void
    {
        if (empty($projectChatId)) {
            return;
        }

        $text = 'üîß –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!: ' . $newStatus . PHP_EOL .
            'üÜî –ó–∞–¥–∞—á–∞: ' . $ticket->name . PHP_EOL .
            'üë®‚Äçüíº –ö—Ç–æ –∏–∑–º–µ–Ω–∏–ª: ' . auth()->user()->name . PHP_EOL .
            '‚ùï –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ' . $oldStatus . PHP_EOL .
            'üÜî –ü—Ä–æ–µ–∫—Ç: ' . $ticket->project->name . PHP_EOL .
            'üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: ' . ($assignees ?: '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã') . PHP_EOL .
            '‚è∞ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: ' . now()->format('d.m.Y H:i') . PHP_EOL .
            'üîó http://canban.mo.local/admin/tickets/' . $ticket->id . PHP_EOL;

        $this->infoBot->send($projectChatId, $text, $threadId);
    }

    private function notifyAssigneesAboutStatusChange(Ticket $ticket, array $assigneesChatIDs, string $newStatus): void
    {
        if (empty($assigneesChatIDs)) {
            return;
        }

        foreach ($assigneesChatIDs as $assigneesChatID) {
            $text = 'üîß –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ' . $newStatus . PHP_EOL .
                'üÜî –ó–∞–¥–∞—á–∞: ' . $ticket->name . PHP_EOL .
                'üë®‚Äçüíº –ö—Ç–æ –∏–∑–º–µ–Ω–∏–ª: ' . auth()->user()->name . PHP_EOL .
                'üîó http://canban.mo.local/admin/tickets/' . $ticket->id . PHP_EOL .
                'üÜî –ü—Ä–æ–µ–∫—Ç: ' . $ticket->project->name . PHP_EOL .
                '‚è∞ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: ' . now()->format('d.m.Y H:i') . PHP_EOL;

            $this->infoBot->send($assigneesChatID, $text);
        }
    }

    public function notifyProjectMemberAdded(Project $project, User $member): void
    {
        if (empty($member->chat_id)) {
            return;
        }

        $message = 'üÜï –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –ø—Ä–æ–µ–∫—Ç: ' . $project->name . PHP_EOL;

        if (!empty($project->start_date) && !empty($project->end_date)) {
            $message .= 'üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ' . $this->formatDate($project->start_date) . PHP_EOL;
            $message .= 'üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ' . $this->formatDate($project->end_date) . PHP_EOL;
        }

        $this->infoBot->send($member->chat_id, $message);
    }

    private function formatDate(mixed $date): string
    {
        if ($date instanceof \DateTimeInterface) {
            return $date->format('d/m/Y');
        }

        if (!empty($date)) {
            try {
                return \Carbon\Carbon::parse($date)->format('d/m/Y');
            } catch (\Throwable) {
                // ignore parsing issue and fall through to default label
            }
        }

        return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    }
}
